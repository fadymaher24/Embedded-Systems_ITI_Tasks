
Interrupt.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000009e4  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .bss          00000006  00800060  00800060  00000a58  2**0
                  ALLOC
  2 .stab         00000c6c  00000000  00000000  00000a58  2**2
                  CONTENTS, READONLY, DEBUGGING
  3 .stabstr      00000ab5  00000000  00000000  000016c4  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 04 04 	jmp	0x808	; 0x808 <__vector_1>
   8:	0c 94 37 04 	jmp	0x86e	; 0x86e <__vector_2>
   c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  10:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  14:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  18:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  1c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  20:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  24:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  28:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  2c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  30:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  34:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  38:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  3c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  40:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  44:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  48:	0c 94 6a 04 	jmp	0x8d4	; 0x8d4 <__vector_18>
  4c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  50:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d4 e0       	ldi	r29, 0x04	; 4
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_clear_bss>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	01 c0       	rjmp	.+2      	; 0x6a <.do_clear_bss_start>

00000068 <.do_clear_bss_loop>:
  68:	1d 92       	st	X+, r1

0000006a <.do_clear_bss_start>:
  6a:	a6 36       	cpi	r26, 0x66	; 102
  6c:	b1 07       	cpc	r27, r17
  6e:	e1 f7       	brne	.-8      	; 0x68 <.do_clear_bss_loop>
  70:	0e 94 9d 04 	call	0x93a	; 0x93a <main>
  74:	0c 94 f0 04 	jmp	0x9e0	; 0x9e0 <_exit>

00000078 <__bad_interrupt>:
  78:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000007c <DIO_voidSetPinDirection>:




void DIO_voidSetPinDirection(u8 copy_u8port, u8 copy_u8pin, u8 copy_u8Direction)
{
  7c:	df 93       	push	r29
  7e:	cf 93       	push	r28
  80:	cd b7       	in	r28, 0x3d	; 61
  82:	de b7       	in	r29, 0x3e	; 62
  84:	27 97       	sbiw	r28, 0x07	; 7
  86:	0f b6       	in	r0, 0x3f	; 63
  88:	f8 94       	cli
  8a:	de bf       	out	0x3e, r29	; 62
  8c:	0f be       	out	0x3f, r0	; 63
  8e:	cd bf       	out	0x3d, r28	; 61
  90:	89 83       	std	Y+1, r24	; 0x01
  92:	6a 83       	std	Y+2, r22	; 0x02
  94:	4b 83       	std	Y+3, r20	; 0x03
	if(copy_u8Direction == 1)             
  96:	8b 81       	ldd	r24, Y+3	; 0x03
  98:	81 30       	cpi	r24, 0x01	; 1
  9a:	09 f0       	breq	.+2      	; 0x9e <DIO_voidSetPinDirection+0x22>
  9c:	6f c0       	rjmp	.+222    	; 0x17c <DIO_voidSetPinDirection+0x100>
	{
		switch(copy_u8port)
  9e:	89 81       	ldd	r24, Y+1	; 0x01
  a0:	28 2f       	mov	r18, r24
  a2:	30 e0       	ldi	r19, 0x00	; 0
  a4:	3f 83       	std	Y+7, r19	; 0x07
  a6:	2e 83       	std	Y+6, r18	; 0x06
  a8:	8e 81       	ldd	r24, Y+6	; 0x06
  aa:	9f 81       	ldd	r25, Y+7	; 0x07
  ac:	81 30       	cpi	r24, 0x01	; 1
  ae:	91 05       	cpc	r25, r1
  b0:	49 f1       	breq	.+82     	; 0x104 <DIO_voidSetPinDirection+0x88>
  b2:	2e 81       	ldd	r18, Y+6	; 0x06
  b4:	3f 81       	ldd	r19, Y+7	; 0x07
  b6:	22 30       	cpi	r18, 0x02	; 2
  b8:	31 05       	cpc	r19, r1
  ba:	2c f4       	brge	.+10     	; 0xc6 <DIO_voidSetPinDirection+0x4a>
  bc:	8e 81       	ldd	r24, Y+6	; 0x06
  be:	9f 81       	ldd	r25, Y+7	; 0x07
  c0:	00 97       	sbiw	r24, 0x00	; 0
  c2:	61 f0       	breq	.+24     	; 0xdc <DIO_voidSetPinDirection+0x60>
  c4:	d2 c0       	rjmp	.+420    	; 0x26a <DIO_voidSetPinDirection+0x1ee>
  c6:	2e 81       	ldd	r18, Y+6	; 0x06
  c8:	3f 81       	ldd	r19, Y+7	; 0x07
  ca:	22 30       	cpi	r18, 0x02	; 2
  cc:	31 05       	cpc	r19, r1
  ce:	71 f1       	breq	.+92     	; 0x12c <DIO_voidSetPinDirection+0xb0>
  d0:	8e 81       	ldd	r24, Y+6	; 0x06
  d2:	9f 81       	ldd	r25, Y+7	; 0x07
  d4:	83 30       	cpi	r24, 0x03	; 3
  d6:	91 05       	cpc	r25, r1
  d8:	e9 f1       	breq	.+122    	; 0x154 <DIO_voidSetPinDirection+0xd8>
  da:	c7 c0       	rjmp	.+398    	; 0x26a <DIO_voidSetPinDirection+0x1ee>
		{
			case 0 : SET_BIT(DDRA,copy_u8pin); break;    
  dc:	aa e3       	ldi	r26, 0x3A	; 58
  de:	b0 e0       	ldi	r27, 0x00	; 0
  e0:	ea e3       	ldi	r30, 0x3A	; 58
  e2:	f0 e0       	ldi	r31, 0x00	; 0
  e4:	80 81       	ld	r24, Z
  e6:	48 2f       	mov	r20, r24
  e8:	8a 81       	ldd	r24, Y+2	; 0x02
  ea:	28 2f       	mov	r18, r24
  ec:	30 e0       	ldi	r19, 0x00	; 0
  ee:	81 e0       	ldi	r24, 0x01	; 1
  f0:	90 e0       	ldi	r25, 0x00	; 0
  f2:	02 2e       	mov	r0, r18
  f4:	02 c0       	rjmp	.+4      	; 0xfa <DIO_voidSetPinDirection+0x7e>
  f6:	88 0f       	add	r24, r24
  f8:	99 1f       	adc	r25, r25
  fa:	0a 94       	dec	r0
  fc:	e2 f7       	brpl	.-8      	; 0xf6 <DIO_voidSetPinDirection+0x7a>
  fe:	84 2b       	or	r24, r20
 100:	8c 93       	st	X, r24
 102:	b3 c0       	rjmp	.+358    	; 0x26a <DIO_voidSetPinDirection+0x1ee>
			case 1 : SET_BIT(DDRB,copy_u8pin); break; 
 104:	a7 e3       	ldi	r26, 0x37	; 55
 106:	b0 e0       	ldi	r27, 0x00	; 0
 108:	e7 e3       	ldi	r30, 0x37	; 55
 10a:	f0 e0       	ldi	r31, 0x00	; 0
 10c:	80 81       	ld	r24, Z
 10e:	48 2f       	mov	r20, r24
 110:	8a 81       	ldd	r24, Y+2	; 0x02
 112:	28 2f       	mov	r18, r24
 114:	30 e0       	ldi	r19, 0x00	; 0
 116:	81 e0       	ldi	r24, 0x01	; 1
 118:	90 e0       	ldi	r25, 0x00	; 0
 11a:	02 2e       	mov	r0, r18
 11c:	02 c0       	rjmp	.+4      	; 0x122 <DIO_voidSetPinDirection+0xa6>
 11e:	88 0f       	add	r24, r24
 120:	99 1f       	adc	r25, r25
 122:	0a 94       	dec	r0
 124:	e2 f7       	brpl	.-8      	; 0x11e <DIO_voidSetPinDirection+0xa2>
 126:	84 2b       	or	r24, r20
 128:	8c 93       	st	X, r24
 12a:	9f c0       	rjmp	.+318    	; 0x26a <DIO_voidSetPinDirection+0x1ee>
			case 2 : SET_BIT(DDRC,copy_u8pin); break; 
 12c:	a4 e3       	ldi	r26, 0x34	; 52
 12e:	b0 e0       	ldi	r27, 0x00	; 0
 130:	e4 e3       	ldi	r30, 0x34	; 52
 132:	f0 e0       	ldi	r31, 0x00	; 0
 134:	80 81       	ld	r24, Z
 136:	48 2f       	mov	r20, r24
 138:	8a 81       	ldd	r24, Y+2	; 0x02
 13a:	28 2f       	mov	r18, r24
 13c:	30 e0       	ldi	r19, 0x00	; 0
 13e:	81 e0       	ldi	r24, 0x01	; 1
 140:	90 e0       	ldi	r25, 0x00	; 0
 142:	02 2e       	mov	r0, r18
 144:	02 c0       	rjmp	.+4      	; 0x14a <DIO_voidSetPinDirection+0xce>
 146:	88 0f       	add	r24, r24
 148:	99 1f       	adc	r25, r25
 14a:	0a 94       	dec	r0
 14c:	e2 f7       	brpl	.-8      	; 0x146 <DIO_voidSetPinDirection+0xca>
 14e:	84 2b       	or	r24, r20
 150:	8c 93       	st	X, r24
 152:	8b c0       	rjmp	.+278    	; 0x26a <DIO_voidSetPinDirection+0x1ee>
			case 3 : SET_BIT(DDRD,copy_u8pin); break; 
 154:	a1 e3       	ldi	r26, 0x31	; 49
 156:	b0 e0       	ldi	r27, 0x00	; 0
 158:	e1 e3       	ldi	r30, 0x31	; 49
 15a:	f0 e0       	ldi	r31, 0x00	; 0
 15c:	80 81       	ld	r24, Z
 15e:	48 2f       	mov	r20, r24
 160:	8a 81       	ldd	r24, Y+2	; 0x02
 162:	28 2f       	mov	r18, r24
 164:	30 e0       	ldi	r19, 0x00	; 0
 166:	81 e0       	ldi	r24, 0x01	; 1
 168:	90 e0       	ldi	r25, 0x00	; 0
 16a:	02 2e       	mov	r0, r18
 16c:	02 c0       	rjmp	.+4      	; 0x172 <DIO_voidSetPinDirection+0xf6>
 16e:	88 0f       	add	r24, r24
 170:	99 1f       	adc	r25, r25
 172:	0a 94       	dec	r0
 174:	e2 f7       	brpl	.-8      	; 0x16e <DIO_voidSetPinDirection+0xf2>
 176:	84 2b       	or	r24, r20
 178:	8c 93       	st	X, r24
 17a:	77 c0       	rjmp	.+238    	; 0x26a <DIO_voidSetPinDirection+0x1ee>
		}
		
	}
	else if(copy_u8Direction == 0)   
 17c:	8b 81       	ldd	r24, Y+3	; 0x03
 17e:	88 23       	and	r24, r24
 180:	09 f0       	breq	.+2      	; 0x184 <DIO_voidSetPinDirection+0x108>
 182:	73 c0       	rjmp	.+230    	; 0x26a <DIO_voidSetPinDirection+0x1ee>
	{
		switch(copy_u8port)
 184:	89 81       	ldd	r24, Y+1	; 0x01
 186:	28 2f       	mov	r18, r24
 188:	30 e0       	ldi	r19, 0x00	; 0
 18a:	3d 83       	std	Y+5, r19	; 0x05
 18c:	2c 83       	std	Y+4, r18	; 0x04
 18e:	8c 81       	ldd	r24, Y+4	; 0x04
 190:	9d 81       	ldd	r25, Y+5	; 0x05
 192:	81 30       	cpi	r24, 0x01	; 1
 194:	91 05       	cpc	r25, r1
 196:	59 f1       	breq	.+86     	; 0x1ee <DIO_voidSetPinDirection+0x172>
 198:	2c 81       	ldd	r18, Y+4	; 0x04
 19a:	3d 81       	ldd	r19, Y+5	; 0x05
 19c:	22 30       	cpi	r18, 0x02	; 2
 19e:	31 05       	cpc	r19, r1
 1a0:	2c f4       	brge	.+10     	; 0x1ac <DIO_voidSetPinDirection+0x130>
 1a2:	8c 81       	ldd	r24, Y+4	; 0x04
 1a4:	9d 81       	ldd	r25, Y+5	; 0x05
 1a6:	00 97       	sbiw	r24, 0x00	; 0
 1a8:	69 f0       	breq	.+26     	; 0x1c4 <DIO_voidSetPinDirection+0x148>
 1aa:	5f c0       	rjmp	.+190    	; 0x26a <DIO_voidSetPinDirection+0x1ee>
 1ac:	2c 81       	ldd	r18, Y+4	; 0x04
 1ae:	3d 81       	ldd	r19, Y+5	; 0x05
 1b0:	22 30       	cpi	r18, 0x02	; 2
 1b2:	31 05       	cpc	r19, r1
 1b4:	89 f1       	breq	.+98     	; 0x218 <DIO_voidSetPinDirection+0x19c>
 1b6:	8c 81       	ldd	r24, Y+4	; 0x04
 1b8:	9d 81       	ldd	r25, Y+5	; 0x05
 1ba:	83 30       	cpi	r24, 0x03	; 3
 1bc:	91 05       	cpc	r25, r1
 1be:	09 f4       	brne	.+2      	; 0x1c2 <DIO_voidSetPinDirection+0x146>
 1c0:	40 c0       	rjmp	.+128    	; 0x242 <DIO_voidSetPinDirection+0x1c6>
 1c2:	53 c0       	rjmp	.+166    	; 0x26a <DIO_voidSetPinDirection+0x1ee>
		{
			case 0 : CLR_BIT(DDRA,copy_u8pin); break; 
 1c4:	aa e3       	ldi	r26, 0x3A	; 58
 1c6:	b0 e0       	ldi	r27, 0x00	; 0
 1c8:	ea e3       	ldi	r30, 0x3A	; 58
 1ca:	f0 e0       	ldi	r31, 0x00	; 0
 1cc:	80 81       	ld	r24, Z
 1ce:	48 2f       	mov	r20, r24
 1d0:	8a 81       	ldd	r24, Y+2	; 0x02
 1d2:	28 2f       	mov	r18, r24
 1d4:	30 e0       	ldi	r19, 0x00	; 0
 1d6:	81 e0       	ldi	r24, 0x01	; 1
 1d8:	90 e0       	ldi	r25, 0x00	; 0
 1da:	02 2e       	mov	r0, r18
 1dc:	02 c0       	rjmp	.+4      	; 0x1e2 <DIO_voidSetPinDirection+0x166>
 1de:	88 0f       	add	r24, r24
 1e0:	99 1f       	adc	r25, r25
 1e2:	0a 94       	dec	r0
 1e4:	e2 f7       	brpl	.-8      	; 0x1de <DIO_voidSetPinDirection+0x162>
 1e6:	80 95       	com	r24
 1e8:	84 23       	and	r24, r20
 1ea:	8c 93       	st	X, r24
 1ec:	3e c0       	rjmp	.+124    	; 0x26a <DIO_voidSetPinDirection+0x1ee>
			case 1 : CLR_BIT(DDRB,copy_u8pin); break; 
 1ee:	a7 e3       	ldi	r26, 0x37	; 55
 1f0:	b0 e0       	ldi	r27, 0x00	; 0
 1f2:	e7 e3       	ldi	r30, 0x37	; 55
 1f4:	f0 e0       	ldi	r31, 0x00	; 0
 1f6:	80 81       	ld	r24, Z
 1f8:	48 2f       	mov	r20, r24
 1fa:	8a 81       	ldd	r24, Y+2	; 0x02
 1fc:	28 2f       	mov	r18, r24
 1fe:	30 e0       	ldi	r19, 0x00	; 0
 200:	81 e0       	ldi	r24, 0x01	; 1
 202:	90 e0       	ldi	r25, 0x00	; 0
 204:	02 2e       	mov	r0, r18
 206:	02 c0       	rjmp	.+4      	; 0x20c <DIO_voidSetPinDirection+0x190>
 208:	88 0f       	add	r24, r24
 20a:	99 1f       	adc	r25, r25
 20c:	0a 94       	dec	r0
 20e:	e2 f7       	brpl	.-8      	; 0x208 <DIO_voidSetPinDirection+0x18c>
 210:	80 95       	com	r24
 212:	84 23       	and	r24, r20
 214:	8c 93       	st	X, r24
 216:	29 c0       	rjmp	.+82     	; 0x26a <DIO_voidSetPinDirection+0x1ee>
			case 2 : CLR_BIT(DDRC,copy_u8pin); break; 
 218:	a4 e3       	ldi	r26, 0x34	; 52
 21a:	b0 e0       	ldi	r27, 0x00	; 0
 21c:	e4 e3       	ldi	r30, 0x34	; 52
 21e:	f0 e0       	ldi	r31, 0x00	; 0
 220:	80 81       	ld	r24, Z
 222:	48 2f       	mov	r20, r24
 224:	8a 81       	ldd	r24, Y+2	; 0x02
 226:	28 2f       	mov	r18, r24
 228:	30 e0       	ldi	r19, 0x00	; 0
 22a:	81 e0       	ldi	r24, 0x01	; 1
 22c:	90 e0       	ldi	r25, 0x00	; 0
 22e:	02 2e       	mov	r0, r18
 230:	02 c0       	rjmp	.+4      	; 0x236 <DIO_voidSetPinDirection+0x1ba>
 232:	88 0f       	add	r24, r24
 234:	99 1f       	adc	r25, r25
 236:	0a 94       	dec	r0
 238:	e2 f7       	brpl	.-8      	; 0x232 <DIO_voidSetPinDirection+0x1b6>
 23a:	80 95       	com	r24
 23c:	84 23       	and	r24, r20
 23e:	8c 93       	st	X, r24
 240:	14 c0       	rjmp	.+40     	; 0x26a <DIO_voidSetPinDirection+0x1ee>
			case 3 : CLR_BIT(DDRD,copy_u8pin); break; 
 242:	a1 e3       	ldi	r26, 0x31	; 49
 244:	b0 e0       	ldi	r27, 0x00	; 0
 246:	e1 e3       	ldi	r30, 0x31	; 49
 248:	f0 e0       	ldi	r31, 0x00	; 0
 24a:	80 81       	ld	r24, Z
 24c:	48 2f       	mov	r20, r24
 24e:	8a 81       	ldd	r24, Y+2	; 0x02
 250:	28 2f       	mov	r18, r24
 252:	30 e0       	ldi	r19, 0x00	; 0
 254:	81 e0       	ldi	r24, 0x01	; 1
 256:	90 e0       	ldi	r25, 0x00	; 0
 258:	02 2e       	mov	r0, r18
 25a:	02 c0       	rjmp	.+4      	; 0x260 <DIO_voidSetPinDirection+0x1e4>
 25c:	88 0f       	add	r24, r24
 25e:	99 1f       	adc	r25, r25
 260:	0a 94       	dec	r0
 262:	e2 f7       	brpl	.-8      	; 0x25c <DIO_voidSetPinDirection+0x1e0>
 264:	80 95       	com	r24
 266:	84 23       	and	r24, r20
 268:	8c 93       	st	X, r24
		}
	}
}
 26a:	27 96       	adiw	r28, 0x07	; 7
 26c:	0f b6       	in	r0, 0x3f	; 63
 26e:	f8 94       	cli
 270:	de bf       	out	0x3e, r29	; 62
 272:	0f be       	out	0x3f, r0	; 63
 274:	cd bf       	out	0x3d, r28	; 61
 276:	cf 91       	pop	r28
 278:	df 91       	pop	r29
 27a:	08 95       	ret

0000027c <DIO_voidSetPinValue>:

void DIO_voidSetPinValue(u8 copy_u8port, u8 copy_u8pin, u8 copy_u8Value)
{
 27c:	df 93       	push	r29
 27e:	cf 93       	push	r28
 280:	cd b7       	in	r28, 0x3d	; 61
 282:	de b7       	in	r29, 0x3e	; 62
 284:	27 97       	sbiw	r28, 0x07	; 7
 286:	0f b6       	in	r0, 0x3f	; 63
 288:	f8 94       	cli
 28a:	de bf       	out	0x3e, r29	; 62
 28c:	0f be       	out	0x3f, r0	; 63
 28e:	cd bf       	out	0x3d, r28	; 61
 290:	89 83       	std	Y+1, r24	; 0x01
 292:	6a 83       	std	Y+2, r22	; 0x02
 294:	4b 83       	std	Y+3, r20	; 0x03
	if(copy_u8Value == 1)           
 296:	8b 81       	ldd	r24, Y+3	; 0x03
 298:	81 30       	cpi	r24, 0x01	; 1
 29a:	09 f0       	breq	.+2      	; 0x29e <DIO_voidSetPinValue+0x22>
 29c:	6f c0       	rjmp	.+222    	; 0x37c <DIO_voidSetPinValue+0x100>
	{
		switch(copy_u8port)
 29e:	89 81       	ldd	r24, Y+1	; 0x01
 2a0:	28 2f       	mov	r18, r24
 2a2:	30 e0       	ldi	r19, 0x00	; 0
 2a4:	3f 83       	std	Y+7, r19	; 0x07
 2a6:	2e 83       	std	Y+6, r18	; 0x06
 2a8:	8e 81       	ldd	r24, Y+6	; 0x06
 2aa:	9f 81       	ldd	r25, Y+7	; 0x07
 2ac:	81 30       	cpi	r24, 0x01	; 1
 2ae:	91 05       	cpc	r25, r1
 2b0:	49 f1       	breq	.+82     	; 0x304 <DIO_voidSetPinValue+0x88>
 2b2:	2e 81       	ldd	r18, Y+6	; 0x06
 2b4:	3f 81       	ldd	r19, Y+7	; 0x07
 2b6:	22 30       	cpi	r18, 0x02	; 2
 2b8:	31 05       	cpc	r19, r1
 2ba:	2c f4       	brge	.+10     	; 0x2c6 <DIO_voidSetPinValue+0x4a>
 2bc:	8e 81       	ldd	r24, Y+6	; 0x06
 2be:	9f 81       	ldd	r25, Y+7	; 0x07
 2c0:	00 97       	sbiw	r24, 0x00	; 0
 2c2:	61 f0       	breq	.+24     	; 0x2dc <DIO_voidSetPinValue+0x60>
 2c4:	d2 c0       	rjmp	.+420    	; 0x46a <__stack+0xb>
 2c6:	2e 81       	ldd	r18, Y+6	; 0x06
 2c8:	3f 81       	ldd	r19, Y+7	; 0x07
 2ca:	22 30       	cpi	r18, 0x02	; 2
 2cc:	31 05       	cpc	r19, r1
 2ce:	71 f1       	breq	.+92     	; 0x32c <DIO_voidSetPinValue+0xb0>
 2d0:	8e 81       	ldd	r24, Y+6	; 0x06
 2d2:	9f 81       	ldd	r25, Y+7	; 0x07
 2d4:	83 30       	cpi	r24, 0x03	; 3
 2d6:	91 05       	cpc	r25, r1
 2d8:	e9 f1       	breq	.+122    	; 0x354 <DIO_voidSetPinValue+0xd8>
 2da:	c7 c0       	rjmp	.+398    	; 0x46a <__stack+0xb>
		{
			case 0 : SET_BIT(PORTA,copy_u8pin); break; 
 2dc:	ab e3       	ldi	r26, 0x3B	; 59
 2de:	b0 e0       	ldi	r27, 0x00	; 0
 2e0:	eb e3       	ldi	r30, 0x3B	; 59
 2e2:	f0 e0       	ldi	r31, 0x00	; 0
 2e4:	80 81       	ld	r24, Z
 2e6:	48 2f       	mov	r20, r24
 2e8:	8a 81       	ldd	r24, Y+2	; 0x02
 2ea:	28 2f       	mov	r18, r24
 2ec:	30 e0       	ldi	r19, 0x00	; 0
 2ee:	81 e0       	ldi	r24, 0x01	; 1
 2f0:	90 e0       	ldi	r25, 0x00	; 0
 2f2:	02 2e       	mov	r0, r18
 2f4:	02 c0       	rjmp	.+4      	; 0x2fa <DIO_voidSetPinValue+0x7e>
 2f6:	88 0f       	add	r24, r24
 2f8:	99 1f       	adc	r25, r25
 2fa:	0a 94       	dec	r0
 2fc:	e2 f7       	brpl	.-8      	; 0x2f6 <DIO_voidSetPinValue+0x7a>
 2fe:	84 2b       	or	r24, r20
 300:	8c 93       	st	X, r24
 302:	b3 c0       	rjmp	.+358    	; 0x46a <__stack+0xb>
			case 1 : SET_BIT(PORTB,copy_u8pin); break; 
 304:	a8 e3       	ldi	r26, 0x38	; 56
 306:	b0 e0       	ldi	r27, 0x00	; 0
 308:	e8 e3       	ldi	r30, 0x38	; 56
 30a:	f0 e0       	ldi	r31, 0x00	; 0
 30c:	80 81       	ld	r24, Z
 30e:	48 2f       	mov	r20, r24
 310:	8a 81       	ldd	r24, Y+2	; 0x02
 312:	28 2f       	mov	r18, r24
 314:	30 e0       	ldi	r19, 0x00	; 0
 316:	81 e0       	ldi	r24, 0x01	; 1
 318:	90 e0       	ldi	r25, 0x00	; 0
 31a:	02 2e       	mov	r0, r18
 31c:	02 c0       	rjmp	.+4      	; 0x322 <DIO_voidSetPinValue+0xa6>
 31e:	88 0f       	add	r24, r24
 320:	99 1f       	adc	r25, r25
 322:	0a 94       	dec	r0
 324:	e2 f7       	brpl	.-8      	; 0x31e <DIO_voidSetPinValue+0xa2>
 326:	84 2b       	or	r24, r20
 328:	8c 93       	st	X, r24
 32a:	9f c0       	rjmp	.+318    	; 0x46a <__stack+0xb>
			case 2 : SET_BIT(PORTC,copy_u8pin); break; 
 32c:	a5 e3       	ldi	r26, 0x35	; 53
 32e:	b0 e0       	ldi	r27, 0x00	; 0
 330:	e5 e3       	ldi	r30, 0x35	; 53
 332:	f0 e0       	ldi	r31, 0x00	; 0
 334:	80 81       	ld	r24, Z
 336:	48 2f       	mov	r20, r24
 338:	8a 81       	ldd	r24, Y+2	; 0x02
 33a:	28 2f       	mov	r18, r24
 33c:	30 e0       	ldi	r19, 0x00	; 0
 33e:	81 e0       	ldi	r24, 0x01	; 1
 340:	90 e0       	ldi	r25, 0x00	; 0
 342:	02 2e       	mov	r0, r18
 344:	02 c0       	rjmp	.+4      	; 0x34a <DIO_voidSetPinValue+0xce>
 346:	88 0f       	add	r24, r24
 348:	99 1f       	adc	r25, r25
 34a:	0a 94       	dec	r0
 34c:	e2 f7       	brpl	.-8      	; 0x346 <DIO_voidSetPinValue+0xca>
 34e:	84 2b       	or	r24, r20
 350:	8c 93       	st	X, r24
 352:	8b c0       	rjmp	.+278    	; 0x46a <__stack+0xb>
			case 3 : SET_BIT(PORTD,copy_u8pin); break; 
 354:	a2 e3       	ldi	r26, 0x32	; 50
 356:	b0 e0       	ldi	r27, 0x00	; 0
 358:	e2 e3       	ldi	r30, 0x32	; 50
 35a:	f0 e0       	ldi	r31, 0x00	; 0
 35c:	80 81       	ld	r24, Z
 35e:	48 2f       	mov	r20, r24
 360:	8a 81       	ldd	r24, Y+2	; 0x02
 362:	28 2f       	mov	r18, r24
 364:	30 e0       	ldi	r19, 0x00	; 0
 366:	81 e0       	ldi	r24, 0x01	; 1
 368:	90 e0       	ldi	r25, 0x00	; 0
 36a:	02 2e       	mov	r0, r18
 36c:	02 c0       	rjmp	.+4      	; 0x372 <DIO_voidSetPinValue+0xf6>
 36e:	88 0f       	add	r24, r24
 370:	99 1f       	adc	r25, r25
 372:	0a 94       	dec	r0
 374:	e2 f7       	brpl	.-8      	; 0x36e <DIO_voidSetPinValue+0xf2>
 376:	84 2b       	or	r24, r20
 378:	8c 93       	st	X, r24
 37a:	77 c0       	rjmp	.+238    	; 0x46a <__stack+0xb>
		}
		
	}
	else if(copy_u8Value == 0)
 37c:	8b 81       	ldd	r24, Y+3	; 0x03
 37e:	88 23       	and	r24, r24
 380:	09 f0       	breq	.+2      	; 0x384 <DIO_voidSetPinValue+0x108>
 382:	73 c0       	rjmp	.+230    	; 0x46a <__stack+0xb>
	{
		switch(copy_u8port)
 384:	89 81       	ldd	r24, Y+1	; 0x01
 386:	28 2f       	mov	r18, r24
 388:	30 e0       	ldi	r19, 0x00	; 0
 38a:	3d 83       	std	Y+5, r19	; 0x05
 38c:	2c 83       	std	Y+4, r18	; 0x04
 38e:	8c 81       	ldd	r24, Y+4	; 0x04
 390:	9d 81       	ldd	r25, Y+5	; 0x05
 392:	81 30       	cpi	r24, 0x01	; 1
 394:	91 05       	cpc	r25, r1
 396:	59 f1       	breq	.+86     	; 0x3ee <DIO_voidSetPinValue+0x172>
 398:	2c 81       	ldd	r18, Y+4	; 0x04
 39a:	3d 81       	ldd	r19, Y+5	; 0x05
 39c:	22 30       	cpi	r18, 0x02	; 2
 39e:	31 05       	cpc	r19, r1
 3a0:	2c f4       	brge	.+10     	; 0x3ac <DIO_voidSetPinValue+0x130>
 3a2:	8c 81       	ldd	r24, Y+4	; 0x04
 3a4:	9d 81       	ldd	r25, Y+5	; 0x05
 3a6:	00 97       	sbiw	r24, 0x00	; 0
 3a8:	69 f0       	breq	.+26     	; 0x3c4 <DIO_voidSetPinValue+0x148>
 3aa:	5f c0       	rjmp	.+190    	; 0x46a <__stack+0xb>
 3ac:	2c 81       	ldd	r18, Y+4	; 0x04
 3ae:	3d 81       	ldd	r19, Y+5	; 0x05
 3b0:	22 30       	cpi	r18, 0x02	; 2
 3b2:	31 05       	cpc	r19, r1
 3b4:	89 f1       	breq	.+98     	; 0x418 <DIO_voidSetPinValue+0x19c>
 3b6:	8c 81       	ldd	r24, Y+4	; 0x04
 3b8:	9d 81       	ldd	r25, Y+5	; 0x05
 3ba:	83 30       	cpi	r24, 0x03	; 3
 3bc:	91 05       	cpc	r25, r1
 3be:	09 f4       	brne	.+2      	; 0x3c2 <DIO_voidSetPinValue+0x146>
 3c0:	40 c0       	rjmp	.+128    	; 0x442 <DIO_voidSetPinValue+0x1c6>
 3c2:	53 c0       	rjmp	.+166    	; 0x46a <__stack+0xb>
		{
			case 0 : CLR_BIT(PORTA,copy_u8pin); break; 
 3c4:	ab e3       	ldi	r26, 0x3B	; 59
 3c6:	b0 e0       	ldi	r27, 0x00	; 0
 3c8:	eb e3       	ldi	r30, 0x3B	; 59
 3ca:	f0 e0       	ldi	r31, 0x00	; 0
 3cc:	80 81       	ld	r24, Z
 3ce:	48 2f       	mov	r20, r24
 3d0:	8a 81       	ldd	r24, Y+2	; 0x02
 3d2:	28 2f       	mov	r18, r24
 3d4:	30 e0       	ldi	r19, 0x00	; 0
 3d6:	81 e0       	ldi	r24, 0x01	; 1
 3d8:	90 e0       	ldi	r25, 0x00	; 0
 3da:	02 2e       	mov	r0, r18
 3dc:	02 c0       	rjmp	.+4      	; 0x3e2 <DIO_voidSetPinValue+0x166>
 3de:	88 0f       	add	r24, r24
 3e0:	99 1f       	adc	r25, r25
 3e2:	0a 94       	dec	r0
 3e4:	e2 f7       	brpl	.-8      	; 0x3de <DIO_voidSetPinValue+0x162>
 3e6:	80 95       	com	r24
 3e8:	84 23       	and	r24, r20
 3ea:	8c 93       	st	X, r24
 3ec:	3e c0       	rjmp	.+124    	; 0x46a <__stack+0xb>
			case 1 : CLR_BIT(PORTB,copy_u8pin); break; 
 3ee:	a8 e3       	ldi	r26, 0x38	; 56
 3f0:	b0 e0       	ldi	r27, 0x00	; 0
 3f2:	e8 e3       	ldi	r30, 0x38	; 56
 3f4:	f0 e0       	ldi	r31, 0x00	; 0
 3f6:	80 81       	ld	r24, Z
 3f8:	48 2f       	mov	r20, r24
 3fa:	8a 81       	ldd	r24, Y+2	; 0x02
 3fc:	28 2f       	mov	r18, r24
 3fe:	30 e0       	ldi	r19, 0x00	; 0
 400:	81 e0       	ldi	r24, 0x01	; 1
 402:	90 e0       	ldi	r25, 0x00	; 0
 404:	02 2e       	mov	r0, r18
 406:	02 c0       	rjmp	.+4      	; 0x40c <DIO_voidSetPinValue+0x190>
 408:	88 0f       	add	r24, r24
 40a:	99 1f       	adc	r25, r25
 40c:	0a 94       	dec	r0
 40e:	e2 f7       	brpl	.-8      	; 0x408 <DIO_voidSetPinValue+0x18c>
 410:	80 95       	com	r24
 412:	84 23       	and	r24, r20
 414:	8c 93       	st	X, r24
 416:	29 c0       	rjmp	.+82     	; 0x46a <__stack+0xb>
			case 2 : CLR_BIT(PORTC,copy_u8pin); break; 
 418:	a5 e3       	ldi	r26, 0x35	; 53
 41a:	b0 e0       	ldi	r27, 0x00	; 0
 41c:	e5 e3       	ldi	r30, 0x35	; 53
 41e:	f0 e0       	ldi	r31, 0x00	; 0
 420:	80 81       	ld	r24, Z
 422:	48 2f       	mov	r20, r24
 424:	8a 81       	ldd	r24, Y+2	; 0x02
 426:	28 2f       	mov	r18, r24
 428:	30 e0       	ldi	r19, 0x00	; 0
 42a:	81 e0       	ldi	r24, 0x01	; 1
 42c:	90 e0       	ldi	r25, 0x00	; 0
 42e:	02 2e       	mov	r0, r18
 430:	02 c0       	rjmp	.+4      	; 0x436 <DIO_voidSetPinValue+0x1ba>
 432:	88 0f       	add	r24, r24
 434:	99 1f       	adc	r25, r25
 436:	0a 94       	dec	r0
 438:	e2 f7       	brpl	.-8      	; 0x432 <DIO_voidSetPinValue+0x1b6>
 43a:	80 95       	com	r24
 43c:	84 23       	and	r24, r20
 43e:	8c 93       	st	X, r24
 440:	14 c0       	rjmp	.+40     	; 0x46a <__stack+0xb>
			case 3 : CLR_BIT(PORTD,copy_u8pin); break; 
 442:	a2 e3       	ldi	r26, 0x32	; 50
 444:	b0 e0       	ldi	r27, 0x00	; 0
 446:	e2 e3       	ldi	r30, 0x32	; 50
 448:	f0 e0       	ldi	r31, 0x00	; 0
 44a:	80 81       	ld	r24, Z
 44c:	48 2f       	mov	r20, r24
 44e:	8a 81       	ldd	r24, Y+2	; 0x02
 450:	28 2f       	mov	r18, r24
 452:	30 e0       	ldi	r19, 0x00	; 0
 454:	81 e0       	ldi	r24, 0x01	; 1
 456:	90 e0       	ldi	r25, 0x00	; 0
 458:	02 2e       	mov	r0, r18
 45a:	02 c0       	rjmp	.+4      	; 0x460 <__stack+0x1>
 45c:	88 0f       	add	r24, r24
 45e:	99 1f       	adc	r25, r25
 460:	0a 94       	dec	r0
 462:	e2 f7       	brpl	.-8      	; 0x45c <DIO_voidSetPinValue+0x1e0>
 464:	80 95       	com	r24
 466:	84 23       	and	r24, r20
 468:	8c 93       	st	X, r24
		}
	}
	
	
}
 46a:	27 96       	adiw	r28, 0x07	; 7
 46c:	0f b6       	in	r0, 0x3f	; 63
 46e:	f8 94       	cli
 470:	de bf       	out	0x3e, r29	; 62
 472:	0f be       	out	0x3f, r0	; 63
 474:	cd bf       	out	0x3d, r28	; 61
 476:	cf 91       	pop	r28
 478:	df 91       	pop	r29
 47a:	08 95       	ret

0000047c <DIO_u8GetPinValue>:

u8 DIO_u8GetPinValue(u8 copy_u8port, u8 copy_u8pin)
{
 47c:	df 93       	push	r29
 47e:	cf 93       	push	r28
 480:	00 d0       	rcall	.+0      	; 0x482 <DIO_u8GetPinValue+0x6>
 482:	00 d0       	rcall	.+0      	; 0x484 <DIO_u8GetPinValue+0x8>
 484:	00 d0       	rcall	.+0      	; 0x486 <DIO_u8GetPinValue+0xa>
 486:	cd b7       	in	r28, 0x3d	; 61
 488:	de b7       	in	r29, 0x3e	; 62
 48a:	89 83       	std	Y+1, r24	; 0x01
 48c:	6a 83       	std	Y+2, r22	; 0x02
	switch(copy_u8port)
 48e:	89 81       	ldd	r24, Y+1	; 0x01
 490:	28 2f       	mov	r18, r24
 492:	30 e0       	ldi	r19, 0x00	; 0
 494:	3d 83       	std	Y+5, r19	; 0x05
 496:	2c 83       	std	Y+4, r18	; 0x04
 498:	4c 81       	ldd	r20, Y+4	; 0x04
 49a:	5d 81       	ldd	r21, Y+5	; 0x05
 49c:	41 30       	cpi	r20, 0x01	; 1
 49e:	51 05       	cpc	r21, r1
 4a0:	49 f1       	breq	.+82     	; 0x4f4 <DIO_u8GetPinValue+0x78>
 4a2:	8c 81       	ldd	r24, Y+4	; 0x04
 4a4:	9d 81       	ldd	r25, Y+5	; 0x05
 4a6:	82 30       	cpi	r24, 0x02	; 2
 4a8:	91 05       	cpc	r25, r1
 4aa:	34 f4       	brge	.+12     	; 0x4b8 <DIO_u8GetPinValue+0x3c>
 4ac:	2c 81       	ldd	r18, Y+4	; 0x04
 4ae:	3d 81       	ldd	r19, Y+5	; 0x05
 4b0:	21 15       	cp	r18, r1
 4b2:	31 05       	cpc	r19, r1
 4b4:	61 f0       	breq	.+24     	; 0x4ce <DIO_u8GetPinValue+0x52>
 4b6:	57 c0       	rjmp	.+174    	; 0x566 <DIO_u8GetPinValue+0xea>
 4b8:	4c 81       	ldd	r20, Y+4	; 0x04
 4ba:	5d 81       	ldd	r21, Y+5	; 0x05
 4bc:	42 30       	cpi	r20, 0x02	; 2
 4be:	51 05       	cpc	r21, r1
 4c0:	61 f1       	breq	.+88     	; 0x51a <DIO_u8GetPinValue+0x9e>
 4c2:	8c 81       	ldd	r24, Y+4	; 0x04
 4c4:	9d 81       	ldd	r25, Y+5	; 0x05
 4c6:	83 30       	cpi	r24, 0x03	; 3
 4c8:	91 05       	cpc	r25, r1
 4ca:	d1 f1       	breq	.+116    	; 0x540 <DIO_u8GetPinValue+0xc4>
 4cc:	4c c0       	rjmp	.+152    	; 0x566 <DIO_u8GetPinValue+0xea>
	{   
		case 0 : return GET_BIT(PINA,copy_u8pin); break; 
 4ce:	e9 e3       	ldi	r30, 0x39	; 57
 4d0:	f0 e0       	ldi	r31, 0x00	; 0
 4d2:	80 81       	ld	r24, Z
 4d4:	28 2f       	mov	r18, r24
 4d6:	30 e0       	ldi	r19, 0x00	; 0
 4d8:	8a 81       	ldd	r24, Y+2	; 0x02
 4da:	88 2f       	mov	r24, r24
 4dc:	90 e0       	ldi	r25, 0x00	; 0
 4de:	a9 01       	movw	r20, r18
 4e0:	02 c0       	rjmp	.+4      	; 0x4e6 <DIO_u8GetPinValue+0x6a>
 4e2:	55 95       	asr	r21
 4e4:	47 95       	ror	r20
 4e6:	8a 95       	dec	r24
 4e8:	e2 f7       	brpl	.-8      	; 0x4e2 <DIO_u8GetPinValue+0x66>
 4ea:	ca 01       	movw	r24, r20
 4ec:	58 2f       	mov	r21, r24
 4ee:	51 70       	andi	r21, 0x01	; 1
 4f0:	5b 83       	std	Y+3, r21	; 0x03
 4f2:	3a c0       	rjmp	.+116    	; 0x568 <DIO_u8GetPinValue+0xec>
		case 1 : return GET_BIT(PINB,copy_u8pin); break; 
 4f4:	e6 e3       	ldi	r30, 0x36	; 54
 4f6:	f0 e0       	ldi	r31, 0x00	; 0
 4f8:	80 81       	ld	r24, Z
 4fa:	28 2f       	mov	r18, r24
 4fc:	30 e0       	ldi	r19, 0x00	; 0
 4fe:	8a 81       	ldd	r24, Y+2	; 0x02
 500:	88 2f       	mov	r24, r24
 502:	90 e0       	ldi	r25, 0x00	; 0
 504:	a9 01       	movw	r20, r18
 506:	02 c0       	rjmp	.+4      	; 0x50c <DIO_u8GetPinValue+0x90>
 508:	55 95       	asr	r21
 50a:	47 95       	ror	r20
 50c:	8a 95       	dec	r24
 50e:	e2 f7       	brpl	.-8      	; 0x508 <DIO_u8GetPinValue+0x8c>
 510:	ca 01       	movw	r24, r20
 512:	58 2f       	mov	r21, r24
 514:	51 70       	andi	r21, 0x01	; 1
 516:	5b 83       	std	Y+3, r21	; 0x03
 518:	27 c0       	rjmp	.+78     	; 0x568 <DIO_u8GetPinValue+0xec>
		case 2 : return GET_BIT(PINC,copy_u8pin); break; 
 51a:	e3 e3       	ldi	r30, 0x33	; 51
 51c:	f0 e0       	ldi	r31, 0x00	; 0
 51e:	80 81       	ld	r24, Z
 520:	28 2f       	mov	r18, r24
 522:	30 e0       	ldi	r19, 0x00	; 0
 524:	8a 81       	ldd	r24, Y+2	; 0x02
 526:	88 2f       	mov	r24, r24
 528:	90 e0       	ldi	r25, 0x00	; 0
 52a:	a9 01       	movw	r20, r18
 52c:	02 c0       	rjmp	.+4      	; 0x532 <DIO_u8GetPinValue+0xb6>
 52e:	55 95       	asr	r21
 530:	47 95       	ror	r20
 532:	8a 95       	dec	r24
 534:	e2 f7       	brpl	.-8      	; 0x52e <DIO_u8GetPinValue+0xb2>
 536:	ca 01       	movw	r24, r20
 538:	58 2f       	mov	r21, r24
 53a:	51 70       	andi	r21, 0x01	; 1
 53c:	5b 83       	std	Y+3, r21	; 0x03
 53e:	14 c0       	rjmp	.+40     	; 0x568 <DIO_u8GetPinValue+0xec>
		case 3 : return GET_BIT(PIND,copy_u8pin); break; 
 540:	e0 e3       	ldi	r30, 0x30	; 48
 542:	f0 e0       	ldi	r31, 0x00	; 0
 544:	80 81       	ld	r24, Z
 546:	28 2f       	mov	r18, r24
 548:	30 e0       	ldi	r19, 0x00	; 0
 54a:	8a 81       	ldd	r24, Y+2	; 0x02
 54c:	88 2f       	mov	r24, r24
 54e:	90 e0       	ldi	r25, 0x00	; 0
 550:	a9 01       	movw	r20, r18
 552:	02 c0       	rjmp	.+4      	; 0x558 <DIO_u8GetPinValue+0xdc>
 554:	55 95       	asr	r21
 556:	47 95       	ror	r20
 558:	8a 95       	dec	r24
 55a:	e2 f7       	brpl	.-8      	; 0x554 <DIO_u8GetPinValue+0xd8>
 55c:	ca 01       	movw	r24, r20
 55e:	58 2f       	mov	r21, r24
 560:	51 70       	andi	r21, 0x01	; 1
 562:	5b 83       	std	Y+3, r21	; 0x03
 564:	01 c0       	rjmp	.+2      	; 0x568 <DIO_u8GetPinValue+0xec>
 566:	02 c0       	rjmp	.+4      	; 0x56c <DIO_u8GetPinValue+0xf0>
	}

}
 568:	8b 81       	ldd	r24, Y+3	; 0x03
 56a:	8e 83       	std	Y+6, r24	; 0x06
 56c:	8e 81       	ldd	r24, Y+6	; 0x06
 56e:	26 96       	adiw	r28, 0x06	; 6
 570:	0f b6       	in	r0, 0x3f	; 63
 572:	f8 94       	cli
 574:	de bf       	out	0x3e, r29	; 62
 576:	0f be       	out	0x3f, r0	; 63
 578:	cd bf       	out	0x3d, r28	; 61
 57a:	cf 91       	pop	r28
 57c:	df 91       	pop	r29
 57e:	08 95       	ret

00000580 <DIO_voidSetPortDirection>:

void DIO_voidSetPortDirection(u8 copy_u8port, u8 copy_u8Direction) 
{
 580:	df 93       	push	r29
 582:	cf 93       	push	r28
 584:	00 d0       	rcall	.+0      	; 0x586 <DIO_voidSetPortDirection+0x6>
 586:	00 d0       	rcall	.+0      	; 0x588 <DIO_voidSetPortDirection+0x8>
 588:	cd b7       	in	r28, 0x3d	; 61
 58a:	de b7       	in	r29, 0x3e	; 62
 58c:	89 83       	std	Y+1, r24	; 0x01
 58e:	6a 83       	std	Y+2, r22	; 0x02
	switch(copy_u8port)
 590:	89 81       	ldd	r24, Y+1	; 0x01
 592:	28 2f       	mov	r18, r24
 594:	30 e0       	ldi	r19, 0x00	; 0
 596:	3c 83       	std	Y+4, r19	; 0x04
 598:	2b 83       	std	Y+3, r18	; 0x03
 59a:	8b 81       	ldd	r24, Y+3	; 0x03
 59c:	9c 81       	ldd	r25, Y+4	; 0x04
 59e:	81 30       	cpi	r24, 0x01	; 1
 5a0:	91 05       	cpc	r25, r1
 5a2:	d1 f0       	breq	.+52     	; 0x5d8 <DIO_voidSetPortDirection+0x58>
 5a4:	2b 81       	ldd	r18, Y+3	; 0x03
 5a6:	3c 81       	ldd	r19, Y+4	; 0x04
 5a8:	22 30       	cpi	r18, 0x02	; 2
 5aa:	31 05       	cpc	r19, r1
 5ac:	2c f4       	brge	.+10     	; 0x5b8 <DIO_voidSetPortDirection+0x38>
 5ae:	8b 81       	ldd	r24, Y+3	; 0x03
 5b0:	9c 81       	ldd	r25, Y+4	; 0x04
 5b2:	00 97       	sbiw	r24, 0x00	; 0
 5b4:	61 f0       	breq	.+24     	; 0x5ce <DIO_voidSetPortDirection+0x4e>
 5b6:	1e c0       	rjmp	.+60     	; 0x5f4 <DIO_voidSetPortDirection+0x74>
 5b8:	2b 81       	ldd	r18, Y+3	; 0x03
 5ba:	3c 81       	ldd	r19, Y+4	; 0x04
 5bc:	22 30       	cpi	r18, 0x02	; 2
 5be:	31 05       	cpc	r19, r1
 5c0:	81 f0       	breq	.+32     	; 0x5e2 <DIO_voidSetPortDirection+0x62>
 5c2:	8b 81       	ldd	r24, Y+3	; 0x03
 5c4:	9c 81       	ldd	r25, Y+4	; 0x04
 5c6:	83 30       	cpi	r24, 0x03	; 3
 5c8:	91 05       	cpc	r25, r1
 5ca:	81 f0       	breq	.+32     	; 0x5ec <DIO_voidSetPortDirection+0x6c>
 5cc:	13 c0       	rjmp	.+38     	; 0x5f4 <DIO_voidSetPortDirection+0x74>
	{
		case 0 : DDRA = copy_u8Direction; break;
 5ce:	ea e3       	ldi	r30, 0x3A	; 58
 5d0:	f0 e0       	ldi	r31, 0x00	; 0
 5d2:	8a 81       	ldd	r24, Y+2	; 0x02
 5d4:	80 83       	st	Z, r24
 5d6:	0e c0       	rjmp	.+28     	; 0x5f4 <DIO_voidSetPortDirection+0x74>
		case 1 : DDRB = copy_u8Direction; break;
 5d8:	e7 e3       	ldi	r30, 0x37	; 55
 5da:	f0 e0       	ldi	r31, 0x00	; 0
 5dc:	8a 81       	ldd	r24, Y+2	; 0x02
 5de:	80 83       	st	Z, r24
 5e0:	09 c0       	rjmp	.+18     	; 0x5f4 <DIO_voidSetPortDirection+0x74>
		case 2 : DDRC = copy_u8Direction; break;
 5e2:	e4 e3       	ldi	r30, 0x34	; 52
 5e4:	f0 e0       	ldi	r31, 0x00	; 0
 5e6:	8a 81       	ldd	r24, Y+2	; 0x02
 5e8:	80 83       	st	Z, r24
 5ea:	04 c0       	rjmp	.+8      	; 0x5f4 <DIO_voidSetPortDirection+0x74>
		case 3 : DDRD = copy_u8Direction; break;
 5ec:	e1 e3       	ldi	r30, 0x31	; 49
 5ee:	f0 e0       	ldi	r31, 0x00	; 0
 5f0:	8a 81       	ldd	r24, Y+2	; 0x02
 5f2:	80 83       	st	Z, r24
	}
	
}
 5f4:	0f 90       	pop	r0
 5f6:	0f 90       	pop	r0
 5f8:	0f 90       	pop	r0
 5fa:	0f 90       	pop	r0
 5fc:	cf 91       	pop	r28
 5fe:	df 91       	pop	r29
 600:	08 95       	ret

00000602 <DIO_voidSetPortValue>:

void DIO_voidSetPortValue(u8 copy_u8port, u8 copy_u8Value)
{
 602:	df 93       	push	r29
 604:	cf 93       	push	r28
 606:	00 d0       	rcall	.+0      	; 0x608 <DIO_voidSetPortValue+0x6>
 608:	00 d0       	rcall	.+0      	; 0x60a <DIO_voidSetPortValue+0x8>
 60a:	cd b7       	in	r28, 0x3d	; 61
 60c:	de b7       	in	r29, 0x3e	; 62
 60e:	89 83       	std	Y+1, r24	; 0x01
 610:	6a 83       	std	Y+2, r22	; 0x02
	switch(copy_u8port)
 612:	89 81       	ldd	r24, Y+1	; 0x01
 614:	28 2f       	mov	r18, r24
 616:	30 e0       	ldi	r19, 0x00	; 0
 618:	3c 83       	std	Y+4, r19	; 0x04
 61a:	2b 83       	std	Y+3, r18	; 0x03
 61c:	8b 81       	ldd	r24, Y+3	; 0x03
 61e:	9c 81       	ldd	r25, Y+4	; 0x04
 620:	81 30       	cpi	r24, 0x01	; 1
 622:	91 05       	cpc	r25, r1
 624:	d1 f0       	breq	.+52     	; 0x65a <DIO_voidSetPortValue+0x58>
 626:	2b 81       	ldd	r18, Y+3	; 0x03
 628:	3c 81       	ldd	r19, Y+4	; 0x04
 62a:	22 30       	cpi	r18, 0x02	; 2
 62c:	31 05       	cpc	r19, r1
 62e:	2c f4       	brge	.+10     	; 0x63a <DIO_voidSetPortValue+0x38>
 630:	8b 81       	ldd	r24, Y+3	; 0x03
 632:	9c 81       	ldd	r25, Y+4	; 0x04
 634:	00 97       	sbiw	r24, 0x00	; 0
 636:	61 f0       	breq	.+24     	; 0x650 <DIO_voidSetPortValue+0x4e>
 638:	1e c0       	rjmp	.+60     	; 0x676 <DIO_voidSetPortValue+0x74>
 63a:	2b 81       	ldd	r18, Y+3	; 0x03
 63c:	3c 81       	ldd	r19, Y+4	; 0x04
 63e:	22 30       	cpi	r18, 0x02	; 2
 640:	31 05       	cpc	r19, r1
 642:	81 f0       	breq	.+32     	; 0x664 <DIO_voidSetPortValue+0x62>
 644:	8b 81       	ldd	r24, Y+3	; 0x03
 646:	9c 81       	ldd	r25, Y+4	; 0x04
 648:	83 30       	cpi	r24, 0x03	; 3
 64a:	91 05       	cpc	r25, r1
 64c:	81 f0       	breq	.+32     	; 0x66e <DIO_voidSetPortValue+0x6c>
 64e:	13 c0       	rjmp	.+38     	; 0x676 <DIO_voidSetPortValue+0x74>
	{
		case 0 : PORTA = copy_u8Value; break;
 650:	eb e3       	ldi	r30, 0x3B	; 59
 652:	f0 e0       	ldi	r31, 0x00	; 0
 654:	8a 81       	ldd	r24, Y+2	; 0x02
 656:	80 83       	st	Z, r24
 658:	0e c0       	rjmp	.+28     	; 0x676 <DIO_voidSetPortValue+0x74>
		case 1 : PORTB = copy_u8Value; break;
 65a:	e8 e3       	ldi	r30, 0x38	; 56
 65c:	f0 e0       	ldi	r31, 0x00	; 0
 65e:	8a 81       	ldd	r24, Y+2	; 0x02
 660:	80 83       	st	Z, r24
 662:	09 c0       	rjmp	.+18     	; 0x676 <DIO_voidSetPortValue+0x74>
		case 2 : PORTC = copy_u8Value; break;
 664:	e5 e3       	ldi	r30, 0x35	; 53
 666:	f0 e0       	ldi	r31, 0x00	; 0
 668:	8a 81       	ldd	r24, Y+2	; 0x02
 66a:	80 83       	st	Z, r24
 66c:	04 c0       	rjmp	.+8      	; 0x676 <DIO_voidSetPortValue+0x74>
		case 3 : PORTD = copy_u8Value; break;
 66e:	e2 e3       	ldi	r30, 0x32	; 50
 670:	f0 e0       	ldi	r31, 0x00	; 0
 672:	8a 81       	ldd	r24, Y+2	; 0x02
 674:	80 83       	st	Z, r24
	}
}
 676:	0f 90       	pop	r0
 678:	0f 90       	pop	r0
 67a:	0f 90       	pop	r0
 67c:	0f 90       	pop	r0
 67e:	cf 91       	pop	r28
 680:	df 91       	pop	r29
 682:	08 95       	ret

00000684 <DIO_voidTogglePinValue>:

void DIO_voidTogglePinValue(u8 copy_u8port,u8 copy_u8Pin)
{
 684:	df 93       	push	r29
 686:	cf 93       	push	r28
 688:	00 d0       	rcall	.+0      	; 0x68a <DIO_voidTogglePinValue+0x6>
 68a:	00 d0       	rcall	.+0      	; 0x68c <DIO_voidTogglePinValue+0x8>
 68c:	cd b7       	in	r28, 0x3d	; 61
 68e:	de b7       	in	r29, 0x3e	; 62
 690:	89 83       	std	Y+1, r24	; 0x01
 692:	6a 83       	std	Y+2, r22	; 0x02
	
	switch(copy_u8port)
 694:	89 81       	ldd	r24, Y+1	; 0x01
 696:	28 2f       	mov	r18, r24
 698:	30 e0       	ldi	r19, 0x00	; 0
 69a:	3c 83       	std	Y+4, r19	; 0x04
 69c:	2b 83       	std	Y+3, r18	; 0x03
 69e:	8b 81       	ldd	r24, Y+3	; 0x03
 6a0:	9c 81       	ldd	r25, Y+4	; 0x04
 6a2:	81 30       	cpi	r24, 0x01	; 1
 6a4:	91 05       	cpc	r25, r1
 6a6:	49 f1       	breq	.+82     	; 0x6fa <DIO_voidTogglePinValue+0x76>
 6a8:	2b 81       	ldd	r18, Y+3	; 0x03
 6aa:	3c 81       	ldd	r19, Y+4	; 0x04
 6ac:	22 30       	cpi	r18, 0x02	; 2
 6ae:	31 05       	cpc	r19, r1
 6b0:	2c f4       	brge	.+10     	; 0x6bc <DIO_voidTogglePinValue+0x38>
 6b2:	8b 81       	ldd	r24, Y+3	; 0x03
 6b4:	9c 81       	ldd	r25, Y+4	; 0x04
 6b6:	00 97       	sbiw	r24, 0x00	; 0
 6b8:	61 f0       	breq	.+24     	; 0x6d2 <DIO_voidTogglePinValue+0x4e>
 6ba:	5a c0       	rjmp	.+180    	; 0x770 <DIO_voidTogglePinValue+0xec>
 6bc:	2b 81       	ldd	r18, Y+3	; 0x03
 6be:	3c 81       	ldd	r19, Y+4	; 0x04
 6c0:	22 30       	cpi	r18, 0x02	; 2
 6c2:	31 05       	cpc	r19, r1
 6c4:	71 f1       	breq	.+92     	; 0x722 <DIO_voidTogglePinValue+0x9e>
 6c6:	8b 81       	ldd	r24, Y+3	; 0x03
 6c8:	9c 81       	ldd	r25, Y+4	; 0x04
 6ca:	83 30       	cpi	r24, 0x03	; 3
 6cc:	91 05       	cpc	r25, r1
 6ce:	e9 f1       	breq	.+122    	; 0x74a <DIO_voidTogglePinValue+0xc6>
 6d0:	4f c0       	rjmp	.+158    	; 0x770 <DIO_voidTogglePinValue+0xec>
	{   
		case 0 :  TOG_BIT(PORTA,copy_u8Pin); break;
 6d2:	ab e3       	ldi	r26, 0x3B	; 59
 6d4:	b0 e0       	ldi	r27, 0x00	; 0
 6d6:	eb e3       	ldi	r30, 0x3B	; 59
 6d8:	f0 e0       	ldi	r31, 0x00	; 0
 6da:	80 81       	ld	r24, Z
 6dc:	48 2f       	mov	r20, r24
 6de:	8a 81       	ldd	r24, Y+2	; 0x02
 6e0:	28 2f       	mov	r18, r24
 6e2:	30 e0       	ldi	r19, 0x00	; 0
 6e4:	81 e0       	ldi	r24, 0x01	; 1
 6e6:	90 e0       	ldi	r25, 0x00	; 0
 6e8:	02 2e       	mov	r0, r18
 6ea:	02 c0       	rjmp	.+4      	; 0x6f0 <DIO_voidTogglePinValue+0x6c>
 6ec:	88 0f       	add	r24, r24
 6ee:	99 1f       	adc	r25, r25
 6f0:	0a 94       	dec	r0
 6f2:	e2 f7       	brpl	.-8      	; 0x6ec <DIO_voidTogglePinValue+0x68>
 6f4:	84 27       	eor	r24, r20
 6f6:	8c 93       	st	X, r24
 6f8:	3b c0       	rjmp	.+118    	; 0x770 <DIO_voidTogglePinValue+0xec>
		case 1 :  TOG_BIT(PORTB,copy_u8Pin); break;
 6fa:	a8 e3       	ldi	r26, 0x38	; 56
 6fc:	b0 e0       	ldi	r27, 0x00	; 0
 6fe:	e8 e3       	ldi	r30, 0x38	; 56
 700:	f0 e0       	ldi	r31, 0x00	; 0
 702:	80 81       	ld	r24, Z
 704:	48 2f       	mov	r20, r24
 706:	8a 81       	ldd	r24, Y+2	; 0x02
 708:	28 2f       	mov	r18, r24
 70a:	30 e0       	ldi	r19, 0x00	; 0
 70c:	81 e0       	ldi	r24, 0x01	; 1
 70e:	90 e0       	ldi	r25, 0x00	; 0
 710:	02 2e       	mov	r0, r18
 712:	02 c0       	rjmp	.+4      	; 0x718 <DIO_voidTogglePinValue+0x94>
 714:	88 0f       	add	r24, r24
 716:	99 1f       	adc	r25, r25
 718:	0a 94       	dec	r0
 71a:	e2 f7       	brpl	.-8      	; 0x714 <DIO_voidTogglePinValue+0x90>
 71c:	84 27       	eor	r24, r20
 71e:	8c 93       	st	X, r24
 720:	27 c0       	rjmp	.+78     	; 0x770 <DIO_voidTogglePinValue+0xec>
		case 2 :  TOG_BIT(PORTC,copy_u8Pin); break;
 722:	a5 e3       	ldi	r26, 0x35	; 53
 724:	b0 e0       	ldi	r27, 0x00	; 0
 726:	e5 e3       	ldi	r30, 0x35	; 53
 728:	f0 e0       	ldi	r31, 0x00	; 0
 72a:	80 81       	ld	r24, Z
 72c:	48 2f       	mov	r20, r24
 72e:	8a 81       	ldd	r24, Y+2	; 0x02
 730:	28 2f       	mov	r18, r24
 732:	30 e0       	ldi	r19, 0x00	; 0
 734:	81 e0       	ldi	r24, 0x01	; 1
 736:	90 e0       	ldi	r25, 0x00	; 0
 738:	02 2e       	mov	r0, r18
 73a:	02 c0       	rjmp	.+4      	; 0x740 <DIO_voidTogglePinValue+0xbc>
 73c:	88 0f       	add	r24, r24
 73e:	99 1f       	adc	r25, r25
 740:	0a 94       	dec	r0
 742:	e2 f7       	brpl	.-8      	; 0x73c <DIO_voidTogglePinValue+0xb8>
 744:	84 27       	eor	r24, r20
 746:	8c 93       	st	X, r24
 748:	13 c0       	rjmp	.+38     	; 0x770 <DIO_voidTogglePinValue+0xec>
		case 3 :  TOG_BIT(PORTD,copy_u8Pin); break;
 74a:	a2 e3       	ldi	r26, 0x32	; 50
 74c:	b0 e0       	ldi	r27, 0x00	; 0
 74e:	e2 e3       	ldi	r30, 0x32	; 50
 750:	f0 e0       	ldi	r31, 0x00	; 0
 752:	80 81       	ld	r24, Z
 754:	48 2f       	mov	r20, r24
 756:	8a 81       	ldd	r24, Y+2	; 0x02
 758:	28 2f       	mov	r18, r24
 75a:	30 e0       	ldi	r19, 0x00	; 0
 75c:	81 e0       	ldi	r24, 0x01	; 1
 75e:	90 e0       	ldi	r25, 0x00	; 0
 760:	02 2e       	mov	r0, r18
 762:	02 c0       	rjmp	.+4      	; 0x768 <DIO_voidTogglePinValue+0xe4>
 764:	88 0f       	add	r24, r24
 766:	99 1f       	adc	r25, r25
 768:	0a 94       	dec	r0
 76a:	e2 f7       	brpl	.-8      	; 0x764 <DIO_voidTogglePinValue+0xe0>
 76c:	84 27       	eor	r24, r20
 76e:	8c 93       	st	X, r24
	}
}
 770:	0f 90       	pop	r0
 772:	0f 90       	pop	r0
 774:	0f 90       	pop	r0
 776:	0f 90       	pop	r0
 778:	cf 91       	pop	r28
 77a:	df 91       	pop	r29
 77c:	08 95       	ret

0000077e <EXTI_voidInit>:
#include "../MCAL/DIO_Interface.h"
#include "EXTI_Interface.h"
#define NULL ((void *)0)
static void (*EXTI_pf_EXTI[3])(void) = {NULL,NULL,NULL};
void EXTI_voidInit(void)
{
 77e:	df 93       	push	r29
 780:	cf 93       	push	r28
 782:	cd b7       	in	r28, 0x3d	; 61
 784:	de b7       	in	r29, 0x3e	; 62
	/* FOR INT0 */
#if   EXTI_INDEX == INT0
	SET_BIT(GICR, GICR_INT0);
 786:	ab e5       	ldi	r26, 0x5B	; 91
 788:	b0 e0       	ldi	r27, 0x00	; 0
 78a:	eb e5       	ldi	r30, 0x5B	; 91
 78c:	f0 e0       	ldi	r31, 0x00	; 0
 78e:	80 81       	ld	r24, Z
 790:	80 64       	ori	r24, 0x40	; 64
 792:	8c 93       	st	X, r24
	CLR_BIT(MCUCR,MCUCR_ISC01);
#elif EXTI_CLOCK == ANY_LOGICAL
	SET_BIT(MCUCR,MCUCR_ISC00);
	CLR_BIT(MCUCR,MCUCR_ISC01);
#elif EXTI_CLOCK == FALLING
	CLR_BIT(MCUCR,MCUCR_ISC00);
 794:	a5 e5       	ldi	r26, 0x55	; 85
 796:	b0 e0       	ldi	r27, 0x00	; 0
 798:	e5 e5       	ldi	r30, 0x55	; 85
 79a:	f0 e0       	ldi	r31, 0x00	; 0
 79c:	80 81       	ld	r24, Z
 79e:	8e 7f       	andi	r24, 0xFE	; 254
 7a0:	8c 93       	st	X, r24
	SET_BIT(MCUCR,MCUCR_ISC01);
 7a2:	a5 e5       	ldi	r26, 0x55	; 85
 7a4:	b0 e0       	ldi	r27, 0x00	; 0
 7a6:	e5 e5       	ldi	r30, 0x55	; 85
 7a8:	f0 e0       	ldi	r31, 0x00	; 0
 7aa:	80 81       	ld	r24, Z
 7ac:	82 60       	ori	r24, 0x02	; 2
 7ae:	8c 93       	st	X, r24
	CLR_BIT(MCUCSR, DIO_PIN6);
#elif EXTI_CLOCK == RAISING
	SET_BIT(MCUCSR, DIO_PIN6);
#endif
#endif
}
 7b0:	cf 91       	pop	r28
 7b2:	df 91       	pop	r29
 7b4:	08 95       	ret

000007b6 <EXTI_voidGIE>:

void EXTI_voidGIE(void)
{
 7b6:	df 93       	push	r29
 7b8:	cf 93       	push	r28
 7ba:	cd b7       	in	r28, 0x3d	; 61
 7bc:	de b7       	in	r29, 0x3e	; 62
#if   GIE == ENABLE
	SET_BIT(SREG, SREG_PIN);
 7be:	af e5       	ldi	r26, 0x5F	; 95
 7c0:	b0 e0       	ldi	r27, 0x00	; 0
 7c2:	ef e5       	ldi	r30, 0x5F	; 95
 7c4:	f0 e0       	ldi	r31, 0x00	; 0
 7c6:	80 81       	ld	r24, Z
 7c8:	80 68       	ori	r24, 0x80	; 128
 7ca:	8c 93       	st	X, r24
#elif GIE == DISABLE
	CLR_BIT(SREG, SREG_PIN);
#endif
}
 7cc:	cf 91       	pop	r28
 7ce:	df 91       	pop	r29
 7d0:	08 95       	ret

000007d2 <EXTI_voidEXTISetCallBack>:


void EXTI_voidEXTISetCallBack(u8 copy_u8EXTIIndex, void (*copy_pf)(void))
{
 7d2:	df 93       	push	r29
 7d4:	cf 93       	push	r28
 7d6:	00 d0       	rcall	.+0      	; 0x7d8 <EXTI_voidEXTISetCallBack+0x6>
 7d8:	0f 92       	push	r0
 7da:	cd b7       	in	r28, 0x3d	; 61
 7dc:	de b7       	in	r29, 0x3e	; 62
 7de:	89 83       	std	Y+1, r24	; 0x01
 7e0:	7b 83       	std	Y+3, r23	; 0x03
 7e2:	6a 83       	std	Y+2, r22	; 0x02
	EXTI_pf_EXTI[copy_u8EXTIIndex] = copy_pf;
 7e4:	89 81       	ldd	r24, Y+1	; 0x01
 7e6:	88 2f       	mov	r24, r24
 7e8:	90 e0       	ldi	r25, 0x00	; 0
 7ea:	88 0f       	add	r24, r24
 7ec:	99 1f       	adc	r25, r25
 7ee:	fc 01       	movw	r30, r24
 7f0:	e0 5a       	subi	r30, 0xA0	; 160
 7f2:	ff 4f       	sbci	r31, 0xFF	; 255
 7f4:	8a 81       	ldd	r24, Y+2	; 0x02
 7f6:	9b 81       	ldd	r25, Y+3	; 0x03
 7f8:	91 83       	std	Z+1, r25	; 0x01
 7fa:	80 83       	st	Z, r24
}
 7fc:	0f 90       	pop	r0
 7fe:	0f 90       	pop	r0
 800:	0f 90       	pop	r0
 802:	cf 91       	pop	r28
 804:	df 91       	pop	r29
 806:	08 95       	ret

00000808 <__vector_1>:

ISR(INT0_vect)
{
 808:	1f 92       	push	r1
 80a:	0f 92       	push	r0
 80c:	0f b6       	in	r0, 0x3f	; 63
 80e:	0f 92       	push	r0
 810:	11 24       	eor	r1, r1
 812:	2f 93       	push	r18
 814:	3f 93       	push	r19
 816:	4f 93       	push	r20
 818:	5f 93       	push	r21
 81a:	6f 93       	push	r22
 81c:	7f 93       	push	r23
 81e:	8f 93       	push	r24
 820:	9f 93       	push	r25
 822:	af 93       	push	r26
 824:	bf 93       	push	r27
 826:	ef 93       	push	r30
 828:	ff 93       	push	r31
 82a:	df 93       	push	r29
 82c:	cf 93       	push	r28
 82e:	cd b7       	in	r28, 0x3d	; 61
 830:	de b7       	in	r29, 0x3e	; 62
	if(EXTI_pf_EXTI[0]!= NULL)
 832:	80 91 60 00 	lds	r24, 0x0060
 836:	90 91 61 00 	lds	r25, 0x0061
 83a:	00 97       	sbiw	r24, 0x00	; 0
 83c:	29 f0       	breq	.+10     	; 0x848 <__vector_1+0x40>
	{
		EXTI_pf_EXTI[0]();
 83e:	e0 91 60 00 	lds	r30, 0x0060
 842:	f0 91 61 00 	lds	r31, 0x0061
 846:	09 95       	icall
	}
}
 848:	cf 91       	pop	r28
 84a:	df 91       	pop	r29
 84c:	ff 91       	pop	r31
 84e:	ef 91       	pop	r30
 850:	bf 91       	pop	r27
 852:	af 91       	pop	r26
 854:	9f 91       	pop	r25
 856:	8f 91       	pop	r24
 858:	7f 91       	pop	r23
 85a:	6f 91       	pop	r22
 85c:	5f 91       	pop	r21
 85e:	4f 91       	pop	r20
 860:	3f 91       	pop	r19
 862:	2f 91       	pop	r18
 864:	0f 90       	pop	r0
 866:	0f be       	out	0x3f, r0	; 63
 868:	0f 90       	pop	r0
 86a:	1f 90       	pop	r1
 86c:	18 95       	reti

0000086e <__vector_2>:

ISR(INT1_vect)
{
 86e:	1f 92       	push	r1
 870:	0f 92       	push	r0
 872:	0f b6       	in	r0, 0x3f	; 63
 874:	0f 92       	push	r0
 876:	11 24       	eor	r1, r1
 878:	2f 93       	push	r18
 87a:	3f 93       	push	r19
 87c:	4f 93       	push	r20
 87e:	5f 93       	push	r21
 880:	6f 93       	push	r22
 882:	7f 93       	push	r23
 884:	8f 93       	push	r24
 886:	9f 93       	push	r25
 888:	af 93       	push	r26
 88a:	bf 93       	push	r27
 88c:	ef 93       	push	r30
 88e:	ff 93       	push	r31
 890:	df 93       	push	r29
 892:	cf 93       	push	r28
 894:	cd b7       	in	r28, 0x3d	; 61
 896:	de b7       	in	r29, 0x3e	; 62
	if(EXTI_pf_EXTI[1]!= NULL)
 898:	80 91 62 00 	lds	r24, 0x0062
 89c:	90 91 63 00 	lds	r25, 0x0063
 8a0:	00 97       	sbiw	r24, 0x00	; 0
 8a2:	29 f0       	breq	.+10     	; 0x8ae <__vector_2+0x40>
	{
		EXTI_pf_EXTI[1]();
 8a4:	e0 91 62 00 	lds	r30, 0x0062
 8a8:	f0 91 63 00 	lds	r31, 0x0063
 8ac:	09 95       	icall
	}
}
 8ae:	cf 91       	pop	r28
 8b0:	df 91       	pop	r29
 8b2:	ff 91       	pop	r31
 8b4:	ef 91       	pop	r30
 8b6:	bf 91       	pop	r27
 8b8:	af 91       	pop	r26
 8ba:	9f 91       	pop	r25
 8bc:	8f 91       	pop	r24
 8be:	7f 91       	pop	r23
 8c0:	6f 91       	pop	r22
 8c2:	5f 91       	pop	r21
 8c4:	4f 91       	pop	r20
 8c6:	3f 91       	pop	r19
 8c8:	2f 91       	pop	r18
 8ca:	0f 90       	pop	r0
 8cc:	0f be       	out	0x3f, r0	; 63
 8ce:	0f 90       	pop	r0
 8d0:	1f 90       	pop	r1
 8d2:	18 95       	reti

000008d4 <__vector_18>:

ISR(INT2_vect)
{
 8d4:	1f 92       	push	r1
 8d6:	0f 92       	push	r0
 8d8:	0f b6       	in	r0, 0x3f	; 63
 8da:	0f 92       	push	r0
 8dc:	11 24       	eor	r1, r1
 8de:	2f 93       	push	r18
 8e0:	3f 93       	push	r19
 8e2:	4f 93       	push	r20
 8e4:	5f 93       	push	r21
 8e6:	6f 93       	push	r22
 8e8:	7f 93       	push	r23
 8ea:	8f 93       	push	r24
 8ec:	9f 93       	push	r25
 8ee:	af 93       	push	r26
 8f0:	bf 93       	push	r27
 8f2:	ef 93       	push	r30
 8f4:	ff 93       	push	r31
 8f6:	df 93       	push	r29
 8f8:	cf 93       	push	r28
 8fa:	cd b7       	in	r28, 0x3d	; 61
 8fc:	de b7       	in	r29, 0x3e	; 62
	if(EXTI_pf_EXTI[2]!= NULL)
 8fe:	80 91 64 00 	lds	r24, 0x0064
 902:	90 91 65 00 	lds	r25, 0x0065
 906:	00 97       	sbiw	r24, 0x00	; 0
 908:	29 f0       	breq	.+10     	; 0x914 <__vector_18+0x40>
	{
		EXTI_pf_EXTI[2]();
 90a:	e0 91 64 00 	lds	r30, 0x0064
 90e:	f0 91 65 00 	lds	r31, 0x0065
 912:	09 95       	icall
	}
}
 914:	cf 91       	pop	r28
 916:	df 91       	pop	r29
 918:	ff 91       	pop	r31
 91a:	ef 91       	pop	r30
 91c:	bf 91       	pop	r27
 91e:	af 91       	pop	r26
 920:	9f 91       	pop	r25
 922:	8f 91       	pop	r24
 924:	7f 91       	pop	r23
 926:	6f 91       	pop	r22
 928:	5f 91       	pop	r21
 92a:	4f 91       	pop	r20
 92c:	3f 91       	pop	r19
 92e:	2f 91       	pop	r18
 930:	0f 90       	pop	r0
 932:	0f be       	out	0x3f, r0	; 63
 934:	0f 90       	pop	r0
 936:	1f 90       	pop	r1
 938:	18 95       	reti

0000093a <main>:


void TGL_Led1(void);
void TGL_Led2(void);

int main(){
 93a:	df 93       	push	r29
 93c:	cf 93       	push	r28
 93e:	cd b7       	in	r28, 0x3d	; 61
 940:	de b7       	in	r29, 0x3e	; 62

//	INT0
	DIO_voidSetPinDirection(DIO_PORTD,PIN2,0);
 942:	83 e0       	ldi	r24, 0x03	; 3
 944:	62 e0       	ldi	r22, 0x02	; 2
 946:	40 e0       	ldi	r20, 0x00	; 0
 948:	0e 94 3e 00 	call	0x7c	; 0x7c <DIO_voidSetPinDirection>
	DIO_voidSetPinValue(DIO_PORTD,PIN2,1);
 94c:	83 e0       	ldi	r24, 0x03	; 3
 94e:	62 e0       	ldi	r22, 0x02	; 2
 950:	41 e0       	ldi	r20, 0x01	; 1
 952:	0e 94 3e 01 	call	0x27c	; 0x27c <DIO_voidSetPinValue>

// 	INT1
	DIO_voidSetPinDirection(DIO_PORTD,PIN3,0);
 956:	83 e0       	ldi	r24, 0x03	; 3
 958:	63 e0       	ldi	r22, 0x03	; 3
 95a:	40 e0       	ldi	r20, 0x00	; 0
 95c:	0e 94 3e 00 	call	0x7c	; 0x7c <DIO_voidSetPinDirection>
	DIO_voidSetPinValue(DIO_PORTD,PIN3,1);
 960:	83 e0       	ldi	r24, 0x03	; 3
 962:	63 e0       	ldi	r22, 0x03	; 3
 964:	41 e0       	ldi	r20, 0x01	; 1
 966:	0e 94 3e 01 	call	0x27c	; 0x27c <DIO_voidSetPinValue>

// LEDS ON PORT B
// LED1
	DIO_voidSetPinDirection(DIO_PORTB,DIO_PIN0,DIO_OUTPUT);
 96a:	81 e0       	ldi	r24, 0x01	; 1
 96c:	60 e0       	ldi	r22, 0x00	; 0
 96e:	41 e0       	ldi	r20, 0x01	; 1
 970:	0e 94 3e 00 	call	0x7c	; 0x7c <DIO_voidSetPinDirection>
	DIO_voidSetPinValue(DIO_PORTB,DIO_PIN0,DIO_LOW);
 974:	81 e0       	ldi	r24, 0x01	; 1
 976:	60 e0       	ldi	r22, 0x00	; 0
 978:	40 e0       	ldi	r20, 0x00	; 0
 97a:	0e 94 3e 01 	call	0x27c	; 0x27c <DIO_voidSetPinValue>

// LED2
	DIO_voidSetPinDirection(DIO_PORTB,DIO_PIN6,DIO_OUTPUT);
 97e:	81 e0       	ldi	r24, 0x01	; 1
 980:	66 e0       	ldi	r22, 0x06	; 6
 982:	41 e0       	ldi	r20, 0x01	; 1
 984:	0e 94 3e 00 	call	0x7c	; 0x7c <DIO_voidSetPinDirection>
	DIO_voidSetPinValue(DIO_PORTB,DIO_PIN6,DIO_LOW);
 988:	81 e0       	ldi	r24, 0x01	; 1
 98a:	66 e0       	ldi	r22, 0x06	; 6
 98c:	40 e0       	ldi	r20, 0x00	; 0
 98e:	0e 94 3e 01 	call	0x27c	; 0x27c <DIO_voidSetPinValue>

	//INIT
	EXTI_voidInit();
 992:	0e 94 bf 03 	call	0x77e	; 0x77e <EXTI_voidInit>
	EXTI_voidEXTISetCallBack(0,&TGL_Led1);
 996:	2a ed       	ldi	r18, 0xDA	; 218
 998:	34 e0       	ldi	r19, 0x04	; 4
 99a:	80 e0       	ldi	r24, 0x00	; 0
 99c:	b9 01       	movw	r22, r18
 99e:	0e 94 e9 03 	call	0x7d2	; 0x7d2 <EXTI_voidEXTISetCallBack>
	EXTI_voidEXTISetCallBack(1,&TGL_Led2);
 9a2:	25 ee       	ldi	r18, 0xE5	; 229
 9a4:	34 e0       	ldi	r19, 0x04	; 4
 9a6:	81 e0       	ldi	r24, 0x01	; 1
 9a8:	b9 01       	movw	r22, r18
 9aa:	0e 94 e9 03 	call	0x7d2	; 0x7d2 <EXTI_voidEXTISetCallBack>
	//GIE
	EXTI_voidGIE();
 9ae:	0e 94 db 03 	call	0x7b6	; 0x7b6 <EXTI_voidGIE>
 9b2:	ff cf       	rjmp	.-2      	; 0x9b2 <main+0x78>

000009b4 <TGL_Led1>:
	while(1){}

	return 0;
}

void TGL_Led1(void){
 9b4:	df 93       	push	r29
 9b6:	cf 93       	push	r28
 9b8:	cd b7       	in	r28, 0x3d	; 61
 9ba:	de b7       	in	r29, 0x3e	; 62
	DIO_voidTogglePinValue(DIO_PORTB,DIO_PIN0);
 9bc:	81 e0       	ldi	r24, 0x01	; 1
 9be:	60 e0       	ldi	r22, 0x00	; 0
 9c0:	0e 94 42 03 	call	0x684	; 0x684 <DIO_voidTogglePinValue>
}
 9c4:	cf 91       	pop	r28
 9c6:	df 91       	pop	r29
 9c8:	08 95       	ret

000009ca <TGL_Led2>:

void TGL_Led2(void){
 9ca:	df 93       	push	r29
 9cc:	cf 93       	push	r28
 9ce:	cd b7       	in	r28, 0x3d	; 61
 9d0:	de b7       	in	r29, 0x3e	; 62
	DIO_voidTogglePinValue(DIO_PORTB,DIO_PIN6);
 9d2:	81 e0       	ldi	r24, 0x01	; 1
 9d4:	66 e0       	ldi	r22, 0x06	; 6
 9d6:	0e 94 42 03 	call	0x684	; 0x684 <DIO_voidTogglePinValue>
}
 9da:	cf 91       	pop	r28
 9dc:	df 91       	pop	r29
 9de:	08 95       	ret

000009e0 <_exit>:
 9e0:	f8 94       	cli

000009e2 <__stop_program>:
 9e2:	ff cf       	rjmp	.-2      	; 0x9e2 <__stop_program>
